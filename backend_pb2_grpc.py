# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import backend_pb2 as backend__pb2


class ResourceStub(object):
    """---------------------------------------------------------
    Resource service enables HTTP-style requests over gRPC.
    ---------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CallResource = channel.unary_stream(
                '/pluginv2.Resource/CallResource',
                request_serializer=backend__pb2.CallResourceRequest.SerializeToString,
                response_deserializer=backend__pb2.CallResourceResponse.FromString,
                )


class ResourceServicer(object):
    """---------------------------------------------------------
    Resource service enables HTTP-style requests over gRPC.
    ---------------------------------------------------------

    """

    def CallResource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResourceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CallResource': grpc.unary_stream_rpc_method_handler(
                    servicer.CallResource,
                    request_deserializer=backend__pb2.CallResourceRequest.FromString,
                    response_serializer=backend__pb2.CallResourceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pluginv2.Resource', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Resource(object):
    """---------------------------------------------------------
    Resource service enables HTTP-style requests over gRPC.
    ---------------------------------------------------------

    """

    @staticmethod
    def CallResource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pluginv2.Resource/CallResource',
            backend__pb2.CallResourceRequest.SerializeToString,
            backend__pb2.CallResourceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DataStub(object):
    """-----------------------------------------------
    Data
    -----------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QueryData = channel.unary_unary(
                '/pluginv2.Data/QueryData',
                request_serializer=backend__pb2.QueryDataRequest.SerializeToString,
                response_deserializer=backend__pb2.QueryDataResponse.FromString,
                )


class DataServicer(object):
    """-----------------------------------------------
    Data
    -----------------------------------------------

    """

    def QueryData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'QueryData': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryData,
                    request_deserializer=backend__pb2.QueryDataRequest.FromString,
                    response_serializer=backend__pb2.QueryDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pluginv2.Data', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Data(object):
    """-----------------------------------------------
    Data
    -----------------------------------------------

    """

    @staticmethod
    def QueryData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pluginv2.Data/QueryData',
            backend__pb2.QueryDataRequest.SerializeToString,
            backend__pb2.QueryDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DiagnosticsStub(object):
    """-----------------------------------------------
    Diagnostics
    -----------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckHealth = channel.unary_unary(
                '/pluginv2.Diagnostics/CheckHealth',
                request_serializer=backend__pb2.CheckHealthRequest.SerializeToString,
                response_deserializer=backend__pb2.CheckHealthResponse.FromString,
                )
        self.CollectMetrics = channel.unary_unary(
                '/pluginv2.Diagnostics/CollectMetrics',
                request_serializer=backend__pb2.CollectMetricsRequest.SerializeToString,
                response_deserializer=backend__pb2.CollectMetricsResponse.FromString,
                )


class DiagnosticsServicer(object):
    """-----------------------------------------------
    Diagnostics
    -----------------------------------------------

    """

    def CheckHealth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CollectMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DiagnosticsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CheckHealth': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckHealth,
                    request_deserializer=backend__pb2.CheckHealthRequest.FromString,
                    response_serializer=backend__pb2.CheckHealthResponse.SerializeToString,
            ),
            'CollectMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.CollectMetrics,
                    request_deserializer=backend__pb2.CollectMetricsRequest.FromString,
                    response_serializer=backend__pb2.CollectMetricsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pluginv2.Diagnostics', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Diagnostics(object):
    """-----------------------------------------------
    Diagnostics
    -----------------------------------------------

    """

    @staticmethod
    def CheckHealth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pluginv2.Diagnostics/CheckHealth',
            backend__pb2.CheckHealthRequest.SerializeToString,
            backend__pb2.CheckHealthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CollectMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pluginv2.Diagnostics/CollectMetrics',
            backend__pb2.CollectMetricsRequest.SerializeToString,
            backend__pb2.CollectMetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class StreamStub(object):
    """-----------------------------------------------------------------
    Stream -- EXPERIMENTAL and is subject to change until 8.0
    -----------------------------------------------------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeStream = channel.unary_unary(
                '/pluginv2.Stream/SubscribeStream',
                request_serializer=backend__pb2.SubscribeStreamRequest.SerializeToString,
                response_deserializer=backend__pb2.SubscribeStreamResponse.FromString,
                )
        self.PublishStream = channel.unary_unary(
                '/pluginv2.Stream/PublishStream',
                request_serializer=backend__pb2.PublishStreamRequest.SerializeToString,
                response_deserializer=backend__pb2.PublishStreamResponse.FromString,
                )
        self.RunStream = channel.unary_stream(
                '/pluginv2.Stream/RunStream',
                request_serializer=backend__pb2.RunStreamRequest.SerializeToString,
                response_deserializer=backend__pb2.StreamPacket.FromString,
                )


class StreamServicer(object):
    """-----------------------------------------------------------------
    Stream -- EXPERIMENTAL and is subject to change until 8.0
    -----------------------------------------------------------------

    """

    def SubscribeStream(self, request, context):
        """SubscribeStream called when a user tries to subscribe to a plugin/datasource
        managed channel path – thus plugin can check subscribe permissions and communicate
        options with Grafana Core.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishStream(self, request, context):
        """PublishStream called when a user tries to publish to a plugin/datasource
        managed channel path. Here plugin can check publish permissions and
        modify publication data if required.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunStream(self, request, context):
        """RunStream will be initiated by Grafana to consume a stream where use_run_stream
        option set to true. In this case RunStream will only be called once for the
        first client successfully subscribed to a channel path. When Grafana detects
        that there are no longer any subscribers inside a channel, the call will be
        terminated until next active subscriber appears. Call termination can happen
        with a delay.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeStream': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeStream,
                    request_deserializer=backend__pb2.SubscribeStreamRequest.FromString,
                    response_serializer=backend__pb2.SubscribeStreamResponse.SerializeToString,
            ),
            'PublishStream': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishStream,
                    request_deserializer=backend__pb2.PublishStreamRequest.FromString,
                    response_serializer=backend__pb2.PublishStreamResponse.SerializeToString,
            ),
            'RunStream': grpc.unary_stream_rpc_method_handler(
                    servicer.RunStream,
                    request_deserializer=backend__pb2.RunStreamRequest.FromString,
                    response_serializer=backend__pb2.StreamPacket.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pluginv2.Stream', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Stream(object):
    """-----------------------------------------------------------------
    Stream -- EXPERIMENTAL and is subject to change until 8.0
    -----------------------------------------------------------------

    """

    @staticmethod
    def SubscribeStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pluginv2.Stream/SubscribeStream',
            backend__pb2.SubscribeStreamRequest.SerializeToString,
            backend__pb2.SubscribeStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pluginv2.Stream/PublishStream',
            backend__pb2.PublishStreamRequest.SerializeToString,
            backend__pb2.PublishStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pluginv2.Stream/RunStream',
            backend__pb2.RunStreamRequest.SerializeToString,
            backend__pb2.StreamPacket.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
